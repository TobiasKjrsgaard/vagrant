# {{ ansible_managed }}
#
# Virtual Host configuration for {{ item.value.host }}
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
server {
	# Make sure the server only listens for traffic on correct port ant protocol
{% if item.value.ssl is defined and item.value.ssl.enabled | default(false) %}
	listen 443 ssl;

{% if item.value.ssl.cert is defined and item.value.ssl.key is defined %}
	# Configure HTTPS/SSL certificate and private key
	ssl_certificate         /etc/nginx/ssl/{{ item.value.ssl.cert | basename }};
	ssl_certificate_key     /etc/nginx/ssl/{{ item.value.ssl.key | basename }};
{% else %}
	# Configure HTTPS/SSL with self signed certificate and private key
	ssl_certificate         /etc/nginx/ssl/{{ item.key }}_self_signed.crt;
	ssl_certificate_key     /etc/nginx/ssl/{{ item.key }}_self_signed.key;
{% endif -%}

{% else %}
	listen 80;
{% endif %}

	# Limit the scope of this server to a specific virtual hostname
	server_name {{ item.value.host }};

	# Store web documents in the www root under hostname directory
	root {{ www_root }}/{{ item.value.host }}/html;
	index index.php index.html index.htm;

	# Store log files in the www root under hostname directory
	error_log {{ www_root }}/{{ item.value.host }}/log/error.log warn;
	access_log {{ www_root }}/{{ item.value.host }}/log/access.log;

{% if item.value.wordpress is defined and item.value.wordpress.install | default(false) %}
	# First attempt to serve request as file then as directory and then at last
	# pass it as arguments to index.php to let a WordPress handle it
	location / {
		try_files $uri $uri/ /index.php?$args;
	}

	# Rewrite requests for WordPress Multisite environments using this amazing
	# ninja-style configuration written by Michael Glad <glad@au.dk>
	if (!-e $request_filename) {
		rewrite /wp-admin$ $scheme://$host$uri/ permanent;
		rewrite ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
		rewrite ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
		rewrite ^/([_0-9a-zA-Z-]+/)?files/(.+)$ /wp-includes/ms-files.php?file=$2 last;
	}
{% else %}
	# First attempt to serve request as file then as a directory
	# or fall back to displaying a 404 page as last resort
	location / {
		try_files $uri $uri/ =404;
	}
{% endif %}

	# Pass the PHP scripts to FastCGI server via Unix socket for this site
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/var/run/php/{{ item.value.host }}.sock;
	}

	# Deny access to .htaccess files left by previous Apache installations
	location ~ /\.ht {
		deny all;
	}

{% if item.value.production is defined and item.value.production.try_assets | default(false) %}
	# Directives to send expires headers and turn off 404 error logging.
	location ~* \.(png|jpe?g|gif|ico)$ {
		expires 24h;
		log_not_found off;
		try_files $uri $uri/ @production;
	}

	location @production {
		resolver 8.8.8.8;
		proxy_pass http://{{ item.value.production.host }}/$uri;
	}

{% endif %}
}

{% if item.value.ssl is defined and item.value.ssl.enabled | default(False) %}
# Redirect plain HTTP requrest on port 80 to HTTPS onf port 443
#
server {
	# Make sure the server only listens for traffic on correct port ant protocol
	listen 80;

	# Limit the scope of this server to a specific virtual hostname
	server_name {{ item.value.host }};

	# Capture host and requrest uri and do a 301 redirect to HTTPS
	return 301 https://$host$request_uri;

}
{% endif %}
